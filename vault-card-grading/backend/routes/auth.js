const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { body, validationResult } = require("express-validator");
const User = require("../models/User");
const nodemailer = require("nodemailer");
const rateLimit = require("express-rate-limit"); // ‚úÖ Protection contre le Brute Force
const sanitizeHtml = require("sanitize-html"); // ‚úÖ Protection XSS
const xss = require("xss"); // ‚úÖ Nettoyage avanc√©
require("dotenv").config();

const router = express.Router();

// ‚úÖ Protection contre le Brute Force sur les connexions
const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // ‚è≥ 15 minutes
  max: 5, // ‚ùå Bloque apr√®s 5 tentatives
  message: "Trop de tentatives de connexion. R√©essayez plus tard.",
});

// ‚úÖ Nettoyage des entr√©es utilisateur
const cleanInput = (input) => xss(sanitizeHtml(input));

// ‚úÖ Configuration de Nodemailer pour l'envoi d'e-mails
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// ‚úÖ Inscription avec hachage du mot de passe
router.post("/register", [
  body("email").isEmail().withMessage("Email invalide").customSanitizer(cleanInput),
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  const { email } = req.body;

  try {
    const userExists = await User.findOne({ email });
    if (userExists) return res.status(400).json({ error: "Cet email est d√©j√† utilis√©" });

    const newUser = new User({ email: cleanInput(email), isVerified: false });
    await newUser.save();

    const verificationToken = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, { expiresIn: "24h" });
    const verificationLink = `${process.env.FRONTEND_URL}/verify-email/${verificationToken}`;

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Confirmez votre compte Vault Card Grading",
      text: `Cliquez sur ce lien pour v√©rifier votre compte : ${verificationLink} (valide 24h)`,
    });

    res.json({ message: "Un e-mail de v√©rification a √©t√© envoy√©. Veuillez confirmer votre adresse." });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ V√©rification d'e-mail
router.get("/verify-email/:token", async (req, res) => {
  try {
    const { token } = req.params;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);

    if (!user) return res.status(400).json({ error: "Utilisateur introuvable" });
    if (user.isVerified) return res.json({ message: "Compte d√©j√† activ√©." });

    user.isVerified = true;
    await user.save();

    res.json({ message: "Votre compte a √©t√© activ√© avec succ√®s ! Veuillez d√©finir votre mot de passe.", redirect: `${process.env.FRONTEND_URL}/set-password/${token}` });
  } catch (error) {
    res.status(400).json({ error: "Lien invalide ou expir√©." });
  }
});

// ‚úÖ D√©finition du mot de passe apr√®s v√©rification
router.post("/set-password", async (req, res) => {
  try {
    const { token, password } = req.body;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);

    if (!user) return res.status(400).json({ error: "Utilisateur introuvable" });
    if (!user.isVerified) return res.status(400).json({ error: "Compte non v√©rifi√©" });

    if (password.length < 6) {
      return res.status(400).json({ error: "Le mot de passe doit contenir au moins 6 caract√®res." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    user.password = hashedPassword;
    await user.save();

    res.json({ message: "Mot de passe d√©fini avec succ√®s. Vous pouvez maintenant vous connecter." });
  } catch (error) {
    res.status(400).json({ error: "Lien invalide ou expir√©." });
  }
});

// ‚úÖ Connexion s√©curis√©e avec protection contre le Brute Force
// ‚úÖ Connexion s√©curis√©e avec protection contre le Brute Force + sanitisation des entr√©es
router.post("/login", loginLimiter, async (req, res) => {
  console.log("Tentative de connexion :", req.body.email);

  // ‚úÖ Nettoyage des entr√©es utilisateur
  const email = cleanInput(req.body.email);
  const password = cleanInput(req.body.password);

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: "Email ou mot de passe incorrect" });

    if (!user.isVerified) {
      return res.status(403).json({ error: "Veuillez v√©rifier votre adresse e-mail avant de vous connecter." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: "Email ou mot de passe incorrect" });

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

    res.cookie("token", token, {
      httpOnly: true,
      secure: true,
      sameSite: "Strict",
      maxAge: 3600000,
    });

    res.json({ message: "Connexion r√©ussie !" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// ‚úÖ V√©rification de l'utilisateur connect√© via le cookie s√©curis√©
router.get("/me", async (req, res) => {
  const token = req.cookies.token;
  if (!token) return res.status(401).json({ error: "Acc√®s refus√©" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId).select("-password");
    res.json(user);
  } catch (err) {
    res.status(400).json({ error: "Token invalide" });
  }
});

// ‚úÖ D√©connexion (supprime le cookie s√©curis√©)
router.post("/logout", (req, res) => {
  res.clearCookie("token", {
    httpOnly: true,
    secure: true,
    sameSite: "Strict",
  });
  res.json({ message: "D√©connexion r√©ussie !" });
});

const csurf = require("csurf"); // ‚úÖ Protection CSRF
const csrfProtection = csurf({ cookie: true });

// ‚úÖ Modifier le mot de passe depuis "Mon Compte" (S√©curis√© avec CSRF et JWT)
router.post("/change-password", csrfProtection, async (req, res) => {
  try {
    const token = req.cookies.token; // ‚úÖ On r√©cup√®re le JWT depuis le cookie s√©curis√©
    if (!token) return res.status(401).json({ error: "Acc√®s refus√©" });

    const { currentPassword, newPassword } = req.body;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);

    if (!user) return res.status(404).json({ error: "Utilisateur introuvable" });

    // üîπ V√©rification de l'ancien mot de passe
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) return res.status(400).json({ error: "L'ancien mot de passe est incorrect" });

    // üîπ V√©rification de la longueur du nouveau mot de passe
    if (newPassword.length < 6) {
      return res.status(400).json({ error: "Le mot de passe doit contenir au moins 6 caract√®res." });
    }

    // üîπ Hachage du nouveau mot de passe et mise √† jour
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    await user.save();

    res.json({ message: "Mot de passe mis √† jour avec succ√®s !" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


module.exports = router;
